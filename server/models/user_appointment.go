// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAppointment user appointment
//
// swagger:model UserAppointment
type UserAppointment struct {

	// ends at
	// Format: date-time
	EndsAt strfmt.DateTime `json:"ends-at,omitempty"`

	// An appointment dentifier. Ignored in put request
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// starts at
	// Format: date-time
	StartsAt strfmt.DateTime `json:"starts-at,omitempty"`

	// trainer id
	// Format: uuid
	TrainerID strfmt.UUID `json:"trainer-id,omitempty"`
}

// Validate validates this user appointment
func (m *UserAppointment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndsAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartsAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrainerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAppointment) validateEndsAt(formats strfmt.Registry) error {

	if swag.IsZero(m.EndsAt) { // not required
		return nil
	}

	if err := validate.FormatOf("ends-at", "body", "date-time", m.EndsAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserAppointment) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserAppointment) validateStartsAt(formats strfmt.Registry) error {

	if swag.IsZero(m.StartsAt) { // not required
		return nil
	}

	if err := validate.FormatOf("starts-at", "body", "date-time", m.StartsAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserAppointment) validateTrainerID(formats strfmt.Registry) error {

	if swag.IsZero(m.TrainerID) { // not required
		return nil
	}

	if err := validate.FormatOf("trainer-id", "body", "uuid", m.TrainerID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAppointment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAppointment) UnmarshalBinary(b []byte) error {
	var res UserAppointment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
