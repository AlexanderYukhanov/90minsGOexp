// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListAvailableTimesForTrainerHandlerFunc turns a function with the right signature into a list available times for trainer handler
type ListAvailableTimesForTrainerHandlerFunc func(ListAvailableTimesForTrainerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListAvailableTimesForTrainerHandlerFunc) Handle(params ListAvailableTimesForTrainerParams) middleware.Responder {
	return fn(params)
}

// ListAvailableTimesForTrainerHandler interface for that can handle valid list available times for trainer params
type ListAvailableTimesForTrainerHandler interface {
	Handle(ListAvailableTimesForTrainerParams) middleware.Responder
}

// NewListAvailableTimesForTrainer creates a new http.Handler for the list available times for trainer operation
func NewListAvailableTimesForTrainer(ctx *middleware.Context, handler ListAvailableTimesForTrainerHandler) *ListAvailableTimesForTrainer {
	return &ListAvailableTimesForTrainer{Context: ctx, Handler: handler}
}

/*ListAvailableTimesForTrainer swagger:route GET /users/trainers/{trainer-id}/availableTimes users listAvailableTimesForTrainer

List available time slots for a trainer

*/
type ListAvailableTimesForTrainer struct {
	Context *middleware.Context
	Handler ListAvailableTimesForTrainerHandler
}

func (o *ListAvailableTimesForTrainer) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListAvailableTimesForTrainerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
