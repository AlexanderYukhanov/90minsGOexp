// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewListAvailableTimesForTrainerParams creates a new ListAvailableTimesForTrainerParams object
// no default values defined in spec.
func NewListAvailableTimesForTrainerParams() ListAvailableTimesForTrainerParams {

	return ListAvailableTimesForTrainerParams{}
}

// ListAvailableTimesForTrainerParams contains all the bound params for the list available times for trainer operation
// typically these are obtained from a http.Request
//
// swagger:parameters listAvailableTimesForTrainer
type ListAvailableTimesForTrainerParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	EndsAt strfmt.DateTime
	/*
	  Required: true
	  In: query
	*/
	StartsAt strfmt.DateTime
	/*
	  Required: true
	  In: path
	*/
	TrainerID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListAvailableTimesForTrainerParams() beforehand.
func (o *ListAvailableTimesForTrainerParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEndsAt, qhkEndsAt, _ := qs.GetOK("ends-at")
	if err := o.bindEndsAt(qEndsAt, qhkEndsAt, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartsAt, qhkStartsAt, _ := qs.GetOK("starts-at")
	if err := o.bindStartsAt(qStartsAt, qhkStartsAt, route.Formats); err != nil {
		res = append(res, err)
	}

	rTrainerID, rhkTrainerID, _ := route.Params.GetOK("trainer-id")
	if err := o.bindTrainerID(rTrainerID, rhkTrainerID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEndsAt binds and validates parameter EndsAt from query.
func (o *ListAvailableTimesForTrainerParams) bindEndsAt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("ends-at", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("ends-at", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("ends-at", "query", "strfmt.DateTime", raw)
	}
	o.EndsAt = *(value.(*strfmt.DateTime))

	if err := o.validateEndsAt(formats); err != nil {
		return err
	}

	return nil
}

// validateEndsAt carries on validations for parameter EndsAt
func (o *ListAvailableTimesForTrainerParams) validateEndsAt(formats strfmt.Registry) error {

	if err := validate.FormatOf("ends-at", "query", "date-time", o.EndsAt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStartsAt binds and validates parameter StartsAt from query.
func (o *ListAvailableTimesForTrainerParams) bindStartsAt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("starts-at", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("starts-at", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("starts-at", "query", "strfmt.DateTime", raw)
	}
	o.StartsAt = *(value.(*strfmt.DateTime))

	if err := o.validateStartsAt(formats); err != nil {
		return err
	}

	return nil
}

// validateStartsAt carries on validations for parameter StartsAt
func (o *ListAvailableTimesForTrainerParams) validateStartsAt(formats strfmt.Registry) error {

	if err := validate.FormatOf("starts-at", "query", "date-time", o.StartsAt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindTrainerID binds and validates parameter TrainerID from path.
func (o *ListAvailableTimesForTrainerParams) bindTrainerID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("trainer-id", "path", "strfmt.UUID", raw)
	}
	o.TrainerID = *(value.(*strfmt.UUID))

	if err := o.validateTrainerID(formats); err != nil {
		return err
	}

	return nil
}

// validateTrainerID carries on validations for parameter TrainerID
func (o *ListAvailableTimesForTrainerParams) validateTrainerID(formats strfmt.Registry) error {

	if err := validate.FormatOf("trainer-id", "path", "uuid", o.TrainerID.String(), formats); err != nil {
		return err
	}
	return nil
}
