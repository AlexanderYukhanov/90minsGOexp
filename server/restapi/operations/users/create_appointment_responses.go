// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/AlexanderYukhanov/90minsGOexp/server/models"
)

// CreateAppointmentCreatedCode is the HTTP code returned for type CreateAppointmentCreated
const CreateAppointmentCreatedCode int = 201

/*CreateAppointmentCreated Created

swagger:response createAppointmentCreated
*/
type CreateAppointmentCreated struct {

	/*
	  In: Body
	*/
	Payload *models.UserAppointment `json:"body,omitempty"`
}

// NewCreateAppointmentCreated creates CreateAppointmentCreated with default headers values
func NewCreateAppointmentCreated() *CreateAppointmentCreated {

	return &CreateAppointmentCreated{}
}

// WithPayload adds the payload to the create appointment created response
func (o *CreateAppointmentCreated) WithPayload(payload *models.UserAppointment) *CreateAppointmentCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create appointment created response
func (o *CreateAppointmentCreated) SetPayload(payload *models.UserAppointment) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAppointmentCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateAppointmentBadRequestCode is the HTTP code returned for type CreateAppointmentBadRequest
const CreateAppointmentBadRequestCode int = 400

/*CreateAppointmentBadRequest Bad request

swagger:response createAppointmentBadRequest
*/
type CreateAppointmentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateAppointmentBadRequest creates CreateAppointmentBadRequest with default headers values
func NewCreateAppointmentBadRequest() *CreateAppointmentBadRequest {

	return &CreateAppointmentBadRequest{}
}

// WithPayload adds the payload to the create appointment bad request response
func (o *CreateAppointmentBadRequest) WithPayload(payload *models.Error) *CreateAppointmentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create appointment bad request response
func (o *CreateAppointmentBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAppointmentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateAppointmentUnauthorizedCode is the HTTP code returned for type CreateAppointmentUnauthorized
const CreateAppointmentUnauthorizedCode int = 401

/*CreateAppointmentUnauthorized Unauthorized

swagger:response createAppointmentUnauthorized
*/
type CreateAppointmentUnauthorized struct {
}

// NewCreateAppointmentUnauthorized creates CreateAppointmentUnauthorized with default headers values
func NewCreateAppointmentUnauthorized() *CreateAppointmentUnauthorized {

	return &CreateAppointmentUnauthorized{}
}

// WriteResponse to the client
func (o *CreateAppointmentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// CreateAppointmentConflictCode is the HTTP code returned for type CreateAppointmentConflict
const CreateAppointmentConflictCode int = 409

/*CreateAppointmentConflict Conflict

swagger:response createAppointmentConflict
*/
type CreateAppointmentConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateAppointmentConflict creates CreateAppointmentConflict with default headers values
func NewCreateAppointmentConflict() *CreateAppointmentConflict {

	return &CreateAppointmentConflict{}
}

// WithPayload adds the payload to the create appointment conflict response
func (o *CreateAppointmentConflict) WithPayload(payload *models.Error) *CreateAppointmentConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create appointment conflict response
func (o *CreateAppointmentConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAppointmentConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateAppointmentTooManyRequestsCode is the HTTP code returned for type CreateAppointmentTooManyRequests
const CreateAppointmentTooManyRequestsCode int = 429

/*CreateAppointmentTooManyRequests Too many requests

swagger:response createAppointmentTooManyRequests
*/
type CreateAppointmentTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCreateAppointmentTooManyRequests creates CreateAppointmentTooManyRequests with default headers values
func NewCreateAppointmentTooManyRequests() *CreateAppointmentTooManyRequests {

	return &CreateAppointmentTooManyRequests{}
}

// WithPayload adds the payload to the create appointment too many requests response
func (o *CreateAppointmentTooManyRequests) WithPayload(payload *models.Error) *CreateAppointmentTooManyRequests {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create appointment too many requests response
func (o *CreateAppointmentTooManyRequests) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateAppointmentTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
