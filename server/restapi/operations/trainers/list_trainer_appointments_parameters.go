// Code generated by go-swagger; DO NOT EDIT.

package trainers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewListTrainerAppointmentsParams creates a new ListTrainerAppointmentsParams object
// no default values defined in spec.
func NewListTrainerAppointmentsParams() ListTrainerAppointmentsParams {

	return ListTrainerAppointmentsParams{}
}

// ListTrainerAppointmentsParams contains all the bound params for the list trainer appointments operation
// typically these are obtained from a http.Request
//
// swagger:parameters listTrainerAppointments
type ListTrainerAppointmentsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	EndsAt strfmt.DateTime
	/*
	  Required: true
	  In: query
	*/
	StartsAt strfmt.DateTime
	/*Provided by API GW after auth
	  Required: true
	  In: header
	*/
	Trainerid strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListTrainerAppointmentsParams() beforehand.
func (o *ListTrainerAppointmentsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qEndsAt, qhkEndsAt, _ := qs.GetOK("ends-at")
	if err := o.bindEndsAt(qEndsAt, qhkEndsAt, route.Formats); err != nil {
		res = append(res, err)
	}

	qStartsAt, qhkStartsAt, _ := qs.GetOK("starts-at")
	if err := o.bindStartsAt(qStartsAt, qhkStartsAt, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindTrainerid(r.Header[http.CanonicalHeaderKey("trainerid")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindEndsAt binds and validates parameter EndsAt from query.
func (o *ListTrainerAppointmentsParams) bindEndsAt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("ends-at", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("ends-at", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("ends-at", "query", "strfmt.DateTime", raw)
	}
	o.EndsAt = *(value.(*strfmt.DateTime))

	if err := o.validateEndsAt(formats); err != nil {
		return err
	}

	return nil
}

// validateEndsAt carries on validations for parameter EndsAt
func (o *ListTrainerAppointmentsParams) validateEndsAt(formats strfmt.Registry) error {

	if err := validate.FormatOf("ends-at", "query", "date-time", o.EndsAt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindStartsAt binds and validates parameter StartsAt from query.
func (o *ListTrainerAppointmentsParams) bindStartsAt(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("starts-at", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("starts-at", "query", raw); err != nil {
		return err
	}

	// Format: date-time
	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("starts-at", "query", "strfmt.DateTime", raw)
	}
	o.StartsAt = *(value.(*strfmt.DateTime))

	if err := o.validateStartsAt(formats); err != nil {
		return err
	}

	return nil
}

// validateStartsAt carries on validations for parameter StartsAt
func (o *ListTrainerAppointmentsParams) validateStartsAt(formats strfmt.Registry) error {

	if err := validate.FormatOf("starts-at", "query", "date-time", o.StartsAt.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindTrainerid binds and validates parameter Trainerid from header.
func (o *ListTrainerAppointmentsParams) bindTrainerid(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("trainerid", "header", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("trainerid", "header", raw); err != nil {
		return err
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("trainerid", "header", "strfmt.UUID", raw)
	}
	o.Trainerid = *(value.(*strfmt.UUID))

	if err := o.validateTrainerid(formats); err != nil {
		return err
	}

	return nil
}

// validateTrainerid carries on validations for parameter Trainerid
func (o *ListTrainerAppointmentsParams) validateTrainerid(formats strfmt.Registry) error {

	if err := validate.FormatOf("trainerid", "header", "uuid", o.Trainerid.String(), formats); err != nil {
		return err
	}
	return nil
}
